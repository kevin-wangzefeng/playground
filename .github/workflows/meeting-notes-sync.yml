name: 📝 Auto Sync Google Docs to GitHub

on:
  schedule:
    # 每天 UTC 时间 02:00 运行 (请根据需要调整)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # 允许手动触发

jobs:
  sync_docs:
    runs-on: ubuntu-latest

    env:
      # 变量来自 GitHub Secrets 或 Variables (vars)
      DOC_FILE_ID: ${{ vars.DOC_FILE_ID }} # 替换为您的 Doc ID
      TARGET_FILE_PATH: 'meeting-notes/kubeedge-community-meeting-notes.md' # 目标路径
      TARGET_BRANCH: 'master'
      DCO_SIGNATURE: 'Signed-off-by: Kevin Wang <kevinwzf0126@gmail.com>'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # 确保拉取完整历史以便进行差异比较
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Google Drive SDK and GitPython
        run: pip install google-auth google-api-python-client GitPython packaging

      # 写入服务账号密钥文档
      - name: Configure Google Service Account
        id: config_sa
        run: |
          # 使用 Here Document (cat << EOF) 将多行 Secret 内容原样写入文档
          cat << EOF > service_account.json
          ${{ secrets.G_SERVICE_ACCOUNT_KEY }}
          EOF

          # 验证文档是否成功写入，并且是合法的 JSON (可选，但推荐检查)
          # python -m json.tool 会尝试解析 JSON，如果成功则不会报错
          echo "Verifying JSON integrity..."
          python -m json.tool service_account.json > /dev/null
          echo "Service Account JSON file successfully created and validated."
          
      - name: Run Python Sync Script
        id: sync
        run: python meeting-notes/sync_script.py
        env:
          REPO_OWNER: '${{ github.repository_owner }}'
          REPO_NAME: '${{ github.event.repository.name }}'
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          
      # 检查是否有文档变更
      - name: Check for Changes
        id: check
        shell: bash
        run: |
          # 检查暂存区 (Index) 或工作目录中是否有任何更改需要提交。
          # git status --porcelain 会以易于解析的格式输出更改列表。
          # wc -l 计算行数：如果行数 > 0，则存在更改。
          CHANGE_COUNT=$(git status --porcelain | wc -l)
          
          if [ $CHANGE_COUNT -gt 0 ]; then
            # 存在更改 (包括新文档)
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Detected $CHANGE_COUNT changes (including new files). Proceeding to create PR."
            # 可选：打印出变更列表
            git status --porcelain
          else
            # 没有更改
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No file changes detected. Skipping PR creation."
          fi

      - name: Commit and Create Pull Request
        if: steps.check.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update ${{ env.TARGET_FILE_PATH }} via GitHub Action\n\n${{ env.DCO_SIGNATURE }}"
          branch: 'action-sync-${{ github.event.repository.name }}-${{ github.sha }}'
          base: ${{ env.TARGET_BRANCH }}
          title: '[Docs] Auto Sync: ${{ env.TARGET_FILE_PATH }}'
          body: |
            This PR was automatically generated by GitHub Actions to sync Google Docs.
            
            - **Source Doc ID:** `${{ env.DOC_FILE_ID }}`
            - **File:** `${{ env.TARGET_FILE_PATH }}`
